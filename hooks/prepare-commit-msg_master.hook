#!/bin/sh
# A stupid script that gets the updated git modules (in our case, packages)
# and set the first commit message line telling them.
# Other lines (from the 2nd to the bottom) are kept as in the original one.

# For debugging
#set -x

# Store the previous commit for our work
commit_file=`readlink -f ${1}`
old_commit_text=`cat "$commit_file"`

# Where are we?
hooks_dir="$(readlink -f ${0} | xargs dirname)"
pushd "$hooks_dir/.." > /dev/null
repo_dir="$PWD"

# Get the last useful line
line_limit=`echo -e "$old_commit_text" |
    grep -n 'stag\|trac' -m 1 |
    cut -d: -f1`

# Get the useful lines with updated packages and make them one-line
modified_packages=`echo -e "$old_commit_text" |
    head -n $line_limit |
    grep -v '.gitmodules\|hooks' |
    grep 'modified\|modificato' |
    cut -d: -f2 |
    sed -e 's/\s\+//' \
        -e 's/hooks\/[a-z -_.]\+//' \
        -e 's/(.*//' \
        -e '/^$/d' |
    tr '\n' ' ' |
    head -c -1`

deleted_packages=`echo -e "$old_commit_text" |
    head -n $line_limit |
    grep -v '.gitmodules\|hooks' |
    grep 'deleted\|eliminato' |
    cut -d: -f2 |
    sed -e 's/\s\+//' \
        -e 's/hooks\/[a-z -_.]\+//' \
        -e 's/(.*//' \
        -e '/^$/d' |
    tr '\n' ' ' |
    head -c -1`

added_packages=`echo -e "$old_commit_text" |
    head -n $line_limit |
    grep -v '.gitmodules\|hooks' |
    grep 'new\|nuovo' |
    cut -d: -f2 |
    sed -e 's/\s\+//' \
        -e 's/hooks\/[a-z -_.]\+//' \
        -e 's/(.*//' \
        -e '/^$/d' |
    tr '\n' ' ' |
    head -c -1`

hooks=`echo -e "$old_commit_text" |
    head -n $line_limit |
    grep 'modif' |
    cut -d: -f2 |
    grep 'hooks' |
    sed -e 's/\s\+//' \
        -e 's/(.*//' |
    tr '\n' ' ' |
    head -c -1`

echo "Added packages:    $added_packages"
echo "Modified packages: $modified_packages"
echo "Deleted packages:  $deleted_packaged"
echo "Hooks:             $hooks"

# Store the old commit message
old_commit_message_start=`echo -e "$old_commit_text" |
    grep -n '^#' -m 1 |
    cut -d: -f1`

old_commit_message=`echo -e "$old_commit_text" |
    tail -n +$old_commit_message_start `

# Format the message properly
rm    $commit_file
touch $commit_file
[ -n "$added_packages" ]    && echo -e "addpkg:   $added_packages"    >> "$commit_file"
[ -n "$modified_packages" ] && echo -e "updpkg:   $modified_packages" >> "$commit_file"
[ -n "$deleted_packages" ]  && echo -e "rmpkg:    $deleted_packages"  >> "$commit_file"
[ -n "$hooks"    ]          && echo -e "updhooks: ${hooks//hooks\//}" >> "$commit_file"

# Add information related to updated packages
[ -n "$modified_packages" ] && echo -e "\nLog from the modified packages:\n" >> "$commit_file"
for p in $modified_packages
do
    # Skip things that are not Git repositories.
    if [ ! -d $p -a ! -e "$p/.git" ]; then
        echo "Skipping $p ..."
        continue
    fi

    # Get the last log info from the repository
    pushd "$repo_dir/$p" > /dev/null
    git log -1 | tail -n +5 | sed '/^\s\+$/d ; s/^\s\+/ /' >> "$commit_file"
    echo -e "" >> "$commit_file"
    popd > /dev/null
done

# Add information for deleted packages
[ -n "$deleted_packages" ] && echo -e "\nAbandoned packages:" >> "$commit_file"
for p in $deleted_packages
do
    echo -e "* $p: ..." >> "$commit_file"
done
echo >> "$commit_file"

# Add information related to the hooks
[ -n "$hooks"    ] && echo -e "Hooks updates:" >> "$commit_file"

for h in $hooks
do
    echo -e "* $h:" >> "$commit_file"
done

# Store the text we manipulated
echo -e "$old_commit_message" >> "$commit_file"

# Back to the previous directory
popd > /dev/null
